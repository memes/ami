#! /bin/sh
#
# SysV init script to configure the AMI instance at boot
#
# chkconfig: 2345 97 3
# description: Run-time configuration of the AMI at boot

### BEGIN INIT INFO
# Provides:          ami_sysv
# Required-Start:    $network
# Required-Stop:     $ALL
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Run-time configuration of the AMI at boot
# Description:       Retrieves meta-data from AWS and updates the AMI
### END INIT INFO

PATH=/usr/bin:/bin:/usr/sbin:/sbin
DEFAULT_AMI_OWNER="memes@matthewemes.com"

# Retrieve meta-data variable and echo to stdout
get_meta_data()
{
    local meta=
    [ $# -ge 1 ] && meta="$1"
    [ -z "${meta}" ] && echo && return

    # Try to get the value from AWS
    wget -q --timeout=60 -O- \
	http://169.254.169.254/latest/meta-data/${meta} 2>/dev/null
    return 0
}

# Retrieve user-data and echo to stdout
get_user_data()
{
    # Try to get the value from AWS
    wget -q --timeout=60 -O- http://169.254.169.254/latest/user-data 2>/dev/null
    echo
    return 0
}

# Update the system notion of hostname
update_hostname()
{
    local new_hostname=
    [ $# -ge 1 ] && new_hostname="$1"
    [ -z "${new_hostname}" ] && \
	new_hostname=$(get_meta_data local-hostname)
    [ -z "${new_hostname}" ] && return 0
    [ "${new_hostname}" = "$(hostname -f)" ] && return 0
    short_hostname=$(echo ${new_hostname} | cut -d. -f1)

    # Update the permanent hostname on this instance
    [ -e /etc/hostname ] && echo "${short_hostname}" > /etc/hostname
    [ -e /etc/sysconfig/network ] && \
	sed -i -e"/^HOSTNAME/cHOSTNAME=${new_hostname}" /etc/sysconfig/network
    if [ "${new_hostname}" = "${short_hostname}" ]; then
	sed -i -e"/^127\.0\.0\.1/c127.0.0.1 ${short_hostname} localhost localhost.localdomain" /etc/hosts
    else
	sed -i -e"/^127\.0\.0\.1/c127.0.0.1 ${new_hostname} ${short_hostname} localhost localhost.localdomain" /etc/hosts
    fi
    hostname ${short_hostname}

    # Update SSH keys for the new host
    rm -f /etc/ssh/ssh_host_key /etc/ssh/ssh_host_key.pub \
	/etc/ssh/ssh_host_dsa_key /etc/ssh/ssh_host_dsa_key.pub \
	/etc/ssh/ssh_host_rsa_key /etc/ssh/ssh_host_rsa_key.pub
    /usr/bin/ssh-keygen -q -t rsa1 -C ${new_hostname} -N '' -f /etc/ssh/ssh_host_key >/dev/null 2>/dev/null
    /usr/bin/ssh-keygen -q -t dsa -C ${new_hostname} -N '' -f /etc/ssh/ssh_host_dsa_key >/dev/null 2>/dev/null
    /usr/bin/ssh-keygen -q -t rsa -C ${new_hostname} -N '' -f /etc/ssh/ssh_host_rsa_key >/dev/null 2>/dev/null
    chmod 600 /etc/ssh/ssh_host_key /etc/ssh/ssh_host_dsa_key \
	/etc/ssh/ssh_host_rsa_key
    chmod 644 /etc/ssh/ssh_host_key.pub /etc/ssh/ssh_host_dsa_key.pub \
	/etc/ssh/ssh_host_rsa_key.pub
    [ -x /sbin/restorecon ] && \
	/sbin/restorecon /etc/ssh/ssh_host_key.pub \
	/etc/ssh/ssh_host_key_rsa.pub \
	/etc/ssh/ssh_host_key_dsa.pub

    [ -x /etc/init.d/ssh ] && /etc/init.d/ssh restart
    [ -x /etc/init.d/sshd ] && /etc/init.d/sshd restart

    # Handle email configuration on the host to reflect new hostname
    if [ -e /etc/debian_version ]; then
	# Debian: reconfigure exim4
	echo "${new_hostname}" > /etc/mailname
	sed -i -e "/^dc_other_hostnames/cdc_other_hostnames='${new_hostname}'" /etc/exim4/update-exim4.conf.conf
	update-exim4.conf
	/etc/init.d/exim4 restart
    fi
    if [ -e /etc/redhat-release ]; then
	# CentOS: reconfigure postfix	
	postconf -e 'inet_interfaces = 127.0.0.1'
	service postfix restart
    fi
}

# Update the owner of the system
update_owner()
{
    local owner=
    [ $# -ge 1 ] && owner="$1"
    [ -z "${owner}" ] && owner=${AMI_OWNER:-${DEFAULT_AMI_OWNER}}
    local rcfile=
    [ -s /etc/debian_version ] && rcfile=/etc/default/ami_sysv
    [ -s /etc/redhat-release ] && rcfile=/etc/sysconfig/ami_sysv
    [ -s ${rcfile} ] || touch ${rcfile}
    sed -i -e"/^#*AMI_OWNER=/cAMI_OWNER=${owner}" ${rcfile}
    grep -q "^AMI_OWNER=${owner}" ${rcfile} >/dev/null 2>/dev/null || \
	echo "AMI_OWNER=${owner}" >> ${rcfile}
}

# Add the public key associated with this instance to the users
update_public_key()
{
    [ -s /etc/default/ami_sysv ] && . /etc/default/ami_sysv
    [ -s /etc/sysconfig/ami_sysv ] && . /etc/sysconfig/ami_sysv
    local key="$(get_meta_data public-keys/0/openssh-key)"
    [ -z "${key}" ] && return 0
    local keysum=$(echo ${key} | sha1sum | cut -f1 -d' ')
    local keyfile=
    local uid=
    local gid=
    local existing_key=
    local existing_keysum=
    local found_key=
    for user in root ${AMI_UPDATE_KEYS}
    do
	found_key=
	uid=$(id -u ${user} 2>/dev/null)
	[ -z "${uid}" ] && continue
	gid=$(id -g ${user} 2>/dev/null)
	keyfile=$(readlink -f `grep "^${user}" /etc/passwd | cut -d: -f6`)/.ssh/authorized_keys2
	# If authorized_keys2 does not exist, create it with the correct
	# permissions
	if [ -d "$(dirname "${keyfile}")" ]; then
	    # Add the key to the existing file
	    if [ -s "${keyfile}" ]; then
		# Try to see if there is already a matching key
		while read existing_key
		do
		    [ -z "${existing_key}" ] && continue
		    existing_keysum=$(echo ${existing_key} | sha1sum | cut -f1 -d' ')
		    [ "${existing_keysum}" = "${keysum}" ] && found_key=1 && \
			break
		done < "${keyfile}"
		[ -z "${found_key}" ] && \
		    echo "${key}" >> "${keyfile}"
	    else
		echo "${key}" >> "${keyfile}"
	    fi
	else
	    mkdir -p "$(dirname "${keyfile}")"
	    echo "${key}" > ${keyfile}
	    chmod 0700 "$(dirname "${keyfile}")"
	    chmod 0600 "${keyfile}"
	    chown -R ${uid}${gid:+:${gid}} "$(dirname "${keyfile}")"
	fi
    done
}

# Process user-supplied data; expect to see a line per key=value pair
process_user_data()
{
    local key=
    local value=
    get_user_data | while read data
    do
	# Force lowercase and split at the first =
	key=$(echo "${data}" | tr [A-Z] [a-z] | cut -f1 -d=)
	value=$(echo "${data}" | tr [A-Z] [a-z] | cut -f2- -d=)
	case "${key}" in
	    hostname)
		update_hostname "${value}"
		;;
	    owner)
		update_owner "${value}"
		;;
	    *)
		;;
	esac
    done
}

# Send a message
send_email()
{
    # Try to be distro independent
    [ -s /etc/default/ami_sysv ] && . /etc/default/ami_sysv
    [ -s /etc/sysconfig/ami_sysv ] && . /etc/sysconfig/ami_sysv
    local owner=${AMI_OWNER:-${DEFAULT_AMI_OWNER}}
    [ -z "${AMI_NO_EMAIL}" -a -n "${owner}" ] && \
	mail -s "AWS $(hostname -s): $1" ${AMI_CC_LIST:+-c ${AMI_CC_LIST}} ${owner}
}

# Try to retrieve some information from meta-data associated with this
# AMI instance and update the run-time configuration. Email the owner,
# if known, that the instance is changing state.
start()
{    
    process_user_data
    update_public_key
    send_email "instance has started" <<EOF
The AWS server named $(hostname -f) has been launched and is available for use. The server may be reached via a remote connection to $(get_meta_data public-hostname) [$(get_meta_data public-ipv4)].

Full details of the instance are shown below.
  instance id: $(get_meta_data instance-id)
  security groups: $(get_meta_data security-groups)
  AWS local network: $(get_meta_data local-hostname) [$(get_meta_data local-ipv4)]
EOF
    return 0
}

# Handle shutdown; nothing to do
stop()
{
    return 0
}

if [ "$(id -u)" != "0" ]; then
    echo "$0: you must be root to execute this script"
    exit 1
fi

case "$1" in
     start)
         # Announce start of server
         start
         ;;
     stop)
         # Announce shutdown of server
         stop
	 ;;
     restart|reload|force-reload)
         # Reattempt the run-time configuration - LSB requirement
	 start
	 ;;
     *)
         echo "Usage: $0 {start|stop|restart|reload|force-reload}" >&2
	 exit 1
	 ;;
esac

# Do not impact any other script; always return success
exit 0
