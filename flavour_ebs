# -*- mode: sh; -*-
# Implements the EBS flavour of AMI creation
#

# Default device to use for EBS volume
DEFAULT_EBS_DEV=${DEFAULT_EBS_DEV:-/dev/xvdf}

# Default wait loop count
DEFAULT_WAIT_LOOP_COUNT=${DEFAULT_WAIT_LOOP_COUNT:-100}
DEFAULT_WAIT_LOOP_TIMEOUT_INCREMENT=${DEFAULT_WAIT_LOOP_TIMEOUT_INCREMENT:-60}

# Returns the instance id of the machine
get_instance_id()
{
    wget -q --timeout=60 -O- http://169.254.169.254/latest/meta-data/instance-id 2>/dev/null
    return 0
}

# Wait for volume status
wait_for_vol_status()
{
    [ $# -ge 1 ] || error "wait_for_vol_status: no arguments supplied"
    local vol_status=
    local count=0
    while [ -z "${vol_status}" -a ${count} -lt ${DEFAULT_WAIT_LOOP_COUNT} ]
    do
	vol_status=$(ec2-describe-volumes ${AMI_LOCATION:+--region "${AMI_LOCATION}"} $@ 2>/dev/null)
	[ -n "${vol_status}" ] && break;
	count=$(($count + 1))
	sleep $(($count * ${DEFAULT_WAIT_LOOP_TIMEOUT_INCREMENT}))
    done
    [ ${count} -ge 10 ] && \
	error "wait_for_vol_status: timeout waiting for volume to match requested status"
    echo ${vol_status}
}
    
# Wait for snapshot status
wait_for_snapshot_status()
{
    [ $# -ge 1 ] || error "wait_for_snapshot_status: no arguments supplied"
    local snapshot_status=
    local count=0
    while [ -z "${snapshot_status}" -a ${count} -lt ${DEFAULT_WAIT_LOOP_COUNT} ]
    do
	snapshot_status=$(ec2-describe-snapshots ${AMI_LOCATION:+--region "${AMI_LOCATION}"} $@ 2>/dev/null)
	[ -n "${snapshot_status}" ] && break;
	count=$(($count + 1))
	sleep $(($count * ${DEFAULT_WAIT_LOOP_TIMEOUT_INCREMENT}))
    done
    [ ${count} -ge 10 ] && \
	error "wait_for_snapshot_status: timeout waiting for snapshot to match requested status"
    echo ${snapshot_status}
}
    
# Get the size of the EBS volume in GB
get_ebs_size()
{
    local ebs_raw_size=$(get_ami_img_size)
    [ ${ebs_raw_size} -ne ${ebs_raw_size} >/dev/null 2>/dev/null ]
    if [ $? -ne 1 -a -n "${ebs_raw_size}" ]; then
	warn "get_ebs_size: EBS volume size is not a number: ${ebs_raw_size}"
	ebs_raw_size=
    fi
    if [ -z "${ebs_raw_size}" ]; then
	warn "get_ebs_size: EBS volume size is unspecified, using default value [${DEFAULT_IMG_SIZE}]"
	ebs_raw_size=${DEFAULT_IMG_SIZE}
    fi
    local ebs_size=$((${ebs_raw_size} / (1024 * 1024 * 1024)))
    [ -z "${ebs_size}" -o ${ebs_size} -lt 1 ] && \
	error "get_ebs_size: calculated EBS size is too small: ${ebs_size}"
    echo "${ebs_size}"
    return 0
}

# Perform initialisation steps for an EBS AMI
flavour_initialise()
{
    local base=
    [ $# -ge 1 ] && base="$1"
    [ -z "${base}" ] && \
	error "flavour_initialise: \$base is unspecified"
    rm_chroot "${base}"
    mkdir -p "${base}" || \
	error "flavour_initialise: unable to create directory ${base}"

    # Make sure this is an EC2 instance
    local instance_id=$(get_instance_id)
    [ -z "${instance_id}" ] && \
	error "flavour_initialise: could not get this server's instance id: must be running on an EC2 machine to use"
    local zone=$(wget -q --timeout=60 -O- http://169.254.169.254/latest/meta-data/placement/availability-zone 2>/dev/null)
    [ -z "${zone}" ] && \
	error "flavour_initialise: could not get this server's availability zone: must be running on an EC2 machine to use"

    # Create a volume to be used
    local ebs_size=$(get_ebs_size)
    [ -z "${ebs_size}" ] && error "flavour_initialise: EBS size is unspecified"
    local vol_id=$(ec2-create-volume --size ${ebs_size} ${AMI_LOCATION:+--region "${AMI_LOCATION}"} --availability-zone "${AMI_ZONE:-$zone}" 2>/dev/null | awk '/^VOLUME/ {print $2}')
    [ -z "${vol_id}" ] && \
	error "flavour_initialise: EBS volume was not created"

    # Wait for the volume to be ready
    local vol_status="$(wait_for_vol_status ${vol_id} --filter="status=available")"
    [ -z "${vol_status}" ] && \
	error "flavour_initialise: EBS volume is not available"

    # Attach the volume
    part_dev=${part_dev:-$DEFAULT_EBS_DEV}
    # Attach volume requires using /dev/sdX not /dev/xvdX, so adjust as
    # necessary
    local att_dev=$(echo ${part_dev} | sed -e 's/xvd/sd/g' 2>/dev/null)
    ec2-attach-volume ${vol_id} ${AMI_LOCATION:+--region "${AMI_LOCATION}"} --instance ${instance_id} --device ${att_dev} >/dev/null 2>/dev/null
    vol_status="$(wait_for_vol_status ${vol_id} --filter="attachment.status=attached")"
    [ -z "${vol_status}" ] && \
	error "flavour_initialise: EBS volume cannot be attached"

    # Format the device
    [ -b ${part_dev} ] || \
	error "flavour_initialise: ${part_dev} is not a block device"
    echo y | ${SUDO} mkfs.ext3 -L root ${part_dev} || \
	error "flavour_initialise: mkfs.ext3 returned error code $?"
    ${SUDO} mount ${part_dev} ${base}
    ismounted "${base}" || \
	error "flavour_initialise: ${part_dev} is not mounted at ${base}"
}

# Finalise the EBS volume
flavour_post_base()
{
    local base=
    [ $# -ge 1 ] && base="$1"
    [ -z "${base}" ] && error "flavour_post_base: \$base is unspecified"
    [ -d "${base}" ] || error "flavour_post_base: ${base} is invalid"

    # Unmount base and detach EBS volume
    ismounted "${base}" && ${SUDO} umount "${base}"
    ismounted "${base}" && error "flavour_post_base: ${base} is still mounted"
    local instance_id=$(get_instance_id)
    [ -z "${instance_id}" ] && \
	error "flavour_post_base: could not determine instance id"
    # Attached volumes are using /dev/sdX not /dev/xvdX, so adjust as
    # necessary
    local att_dev=$(echo ${part_dev:-$DEFAULT_PART_DEV} | sed -e 's/xvd/sd/g' 2>/dev/null)
    local vol_id="$(wait_for_vol_status --filter="attachment.instance-id=${instance_id}" --filter="attachment.device=${att_dev}" | awk '/ATTACHMENT/ {print $2}' 2>/dev/null)"
    [ -z "${vol_id}" ] && \
	error "flavour_post_base: could not determine volume id"
    ec2-detach-volume ${vol_id} ${AMI_LOCATION:+--region "${AMI_LOCATION}"} >/dev/null 2>/dev/null
    local vol_status="$(wait_for_vol_status ${vol_id} --filter="status=available")"
    [ -z "${vol_status}" ] && \
	error "flavour_post_base: EBS volume did not detach"

    # Get the volume size
    local vol_size="$(wait_for_vol_status ${vol_id} | awk '/^VOLUME/ {print $3}')"
    [ -z "${vol_size}" ] && \
	error "flavour_post_base: couldn't determine volume size"

    # Make a snapshot of the volume for registration
    local snapshot_id=$(ec2-create-snapshot ${vol_id} ${AMI_LOCATION:+--region "${AMI_LOCATION}"} --description "Base snapshot for: $(get_ami_description)" 2>/dev/null | awk '/SNAPSHOT/ {print $2}')
    [ -z "${snapshot_id}" ] && \
	error "flavour_post_base: could not determine snapshot id"
    local snapshot_status="$(wait_for_snapshot_status ${snapshot_id} --filter="status=completed")"
    [ -z "${snapshot_status}" ] && \
	error "flavour_post_base: EBS snapshot did not complete"

    # Register the snapshot as a new instance
    local kernel_id=$(get_kernel_id)
    local ramdisk_id=$(get_ramdisk_id)
    local block_mappings="--block-device-mapping /dev/sda1=${snapshot_id}:${vol_size}:false"
    [ "i386" = "${AMI_ARCH}" ] && \
        block_mappings="${block_mappings},/dev/sda2=ephemeral0,/dev/sda3=swap"
    [ "x86_64" = "${AMI_ARCH}" ] && \
        block_mappings="${block_mappings},/dev/sdb=ephemeral0,/dev/sdc=ephemeral1"

    ec2-register --name "$(get_ami_name)" \
	--description "$(get_ami_description)" \
	--architecture ${AMI_ARCH} \
	${kernel_id:+--kernel "${kernel_id}"} \
        ${ramdisk_id:+--ramdisk "${ramdisk_id}"} \
	--root-device-name /dev/sda1 \
	${AMI_LOCATION:+--region "${AMI_LOCATION}"} ${block_mappings}
}

# Return non-empty if this flavour supports pvgrub
flavour_support_pvgrub()
{
    echo "true"
}
